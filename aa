function hook_dlopen(soName) {
    Interceptor.attach(Module.findExportByName(null, "dlopen"),
        {
            onEnter: function (args) {
                var pathptr = args[0];
                if (pathptr !== undefined && pathptr != null) {
                    var path = ptr(pathptr).readCString();
                    // console.log("[dlopen] ", path);
                    if (path.indexOf(soName) >= 0) {
                        this.is_can_hook = true;
                    }
                }
            },
            onLeave: function (retval) {
                if (this.is_can_hook) {
                    console.log("hook start...");
                    hook_func(soName)
                }
            }
        }
    );
 
    Interceptor.attach(Module.findExportByName(null, "android_dlopen_ext"),
        {
            onEnter: function (args) {
                var pathptr = args[0];
                if (pathptr !== undefined && pathptr != null) {
                    var path = ptr(pathptr).readCString();
                    // console.log("[android_dlopen_ext] ", path);
                    if (path.indexOf(soName) >= 0) {
                        this.is_can_hook = true;
                    }
                }
            },
            onLeave: function (retval) {
                if (this.is_can_hook) {
                    console.log("hook start...");
                    hook_func(soName)
                }
            }
        }
    );
}

function hook_func(soName) {
    var base = Module.findBaseAddress(soName);
    function hook_pthread_func2() {
        Interceptor.attach(base.add(0x983C), {
            onEnter: function(args) {
                // bypass root check2
                let check_path = args[0].readPointer().readCString();
                if (check_path.indexOf("/su") != -1) {
                    Memory.writeUtf8String(args[0].readPointer(), check_path.replace("/su", "/XX"));
                }
                if (check_path.indexOf("magisk") != -1) {
                    Memory.writeUtf8String(args[0].readPointer(), check_path.replace("magisk", "3Ag1sk"));
                }
                if (check_path.indexOf("/sbin") != -1) {
                    Memory.writeUtf8String(args[0].readPointer(), check_path.replace("/sbin", "/ABCD"));
                }
            }
        })
    }
    function hook_openat() {
        Interceptor.attach(Module.findExportByName(null, "openat"), {
            onEnter: function(args) {
                let path = args[1].readCString();
                // bypass Magisk check
                if (path.indexOf("/data/app/j.rjshqqeirnhhbc") != -1 && path.indexOf("base.apk") != -1) {
                    Memory.writeUtf8String(args[1], "/data/local/tmp/base.apk");
                    console.log("[openat] bypass: ", path, args[1].readCString());
                }
            }
        })
    }
    hook_pthread_func2();
    hook_openat();
}

function hook_lstat() {
    let fake_time = Date.now();
    // bypass frida crash
    Interceptor.attach(Module.findExportByName(null, "lstat"), {
        onEnter: function(args) {
            this.name = args[0].readCString();
            this.statbuf = args[1];
        },
        onLeave: function(retval) {
            if (this.name == "/system/lib") {
                this.statbuf.add(0x68).writeU64(fake_time++);
                console.log("bypass lstat");
            }
            if (this.name == "/sbin") {
                this.statbuf.add(0x68).writeU64(fake_time++);
                console.log("bypass lstat");
            }
        }
    })
}

function hook_popen() {
    Interceptor.attach(Module.findExportByName(null, "popen"), {
        onEnter: function(args) {
            if (args[0].readCString().indexOf(" su") != -1) {
                // bypass root check1
                console.log("[popen] which su -> which xx");
                Memory.writeUtf8String(args[0], "which xx");
            }
        }
    })
}

function printStack(){
    console.log(Java.use("android.util.Log").getStackTraceString(Java.use("java.lang.Exception").$new()))
}

function hook_java() {
    Java.perform(() => {
        function hook_reg_func_d() {
            let da = Java.use("com.xshield.da");
            da["d"].implementation = function (str, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, i9, i10, i11, i12, i13, i14, i15, i16) {
                // bypasss debuggalbe
                const FLAG_DEBUGGABLE = 0x2;
                i14 &= (~FLAG_DEBUGGABLE);
                console.log(`da.d is called: str=${str}, str2=${str2}, str3=${str3}, str4=${str4}, str5=${str5}, str6=${str6}, str7=${str7}, str8=${str8}, str9=${str9}, str10=${str10}, str11=${str11}, i9=${i9}, i10=${i10}, i11=${i11}, i12=${i12}, i13=${i13}, i14=${i14}, i15=${i15}, i16=${i16}`);
                let result = this["d"](str, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, i9, i10, i11, i12, i13, i14, i15, i16);
                console.log(`da.d result=${result}`);
                return result;
            };
        }
        hook_reg_func_d();
    })

}

function main() {
    hook_dlopen("libdxbase.so");
    hook_lstat();
    hook_popen();
    hook_java();
}

setImmediate(main)
